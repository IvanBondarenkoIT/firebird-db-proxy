"""
Firebird Database Proxy API - –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Firebird –ë–î —á–µ—Ä–µ–∑ REST API.
"""

import logging
from contextlib import asynccontextmanager
from datetime import datetime
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

from app.config import settings
from app.database import initialize_db_pool
from app.routers import query, health, info

# ==================== LOGGING ====================

logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format='[%(asctime)s] [%(levelname)s] [%(name)s:%(lineno)d] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

# ==================== RATE LIMITER ====================

limiter = Limiter(key_func=get_remote_address)

# ==================== LIFESPAN ====================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifespan context manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
    """
    # Startup
    logger.info("=" * 60)
    logger.info(f"Starting {settings.app_name} v{settings.app_version}")
    logger.info(f"Environment: {settings.app_env}")
    logger.info(f"Log level: {settings.log_level}")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    try:
        db_pool = initialize_db_pool()
        logger.info(f"Database: {settings.db_dsn}")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if db_pool.test_connection():
            logger.info("Database connection test: SUCCESS ‚úì")
        else:
            logger.warning("Database connection test: FAILED ‚úó")
            logger.warning("API will start but database operations may fail")
    except Exception as e:
        logger.error(f"Failed to initialize database pool: {e}")
        logger.warning("API will start but database operations will fail")
    
    logger.info(f"API server starting on port {settings.port}")
    logger.info("=" * 60)
    
    yield
    
    # Shutdown
    logger.info("=" * 60)
    logger.info("Shutting down gracefully...")
    logger.info(f"{settings.app_name} stopped")
    logger.info("=" * 60)


# ==================== APP INITIALIZATION ====================

app = FastAPI(
    title=settings.app_name,
    description="""
    üîÑ **Firebird Database Proxy API**
    
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π REST API gateway –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Firebird –ë–î —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    
    ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    * üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: Bearer Token –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    * ‚úÖ **–í–∞–ª–∏–¥–∞—Ü–∏—è**: –¢–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    * üöÄ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: Connection pooling
    * üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: Health check endpoint
    * üõ°Ô∏è **–ó–∞—â–∏—Ç–∞**: Rate limiting –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    
    ## –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    
    –í—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoint'—ã —Ç—Ä–µ–±—É—é—Ç Bearer Token –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:
    
    ```
    Authorization: Bearer YOUR_TOKEN
    ```
    
    ## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    ### Python
    ```python
    import requests
    
    headers = {"Authorization": "Bearer YOUR_TOKEN"}
    response = requests.post(
        "https://api.example.com/api/query",
        json={"query": "SELECT * FROM STORGRP"},
        headers=headers
    )
    print(response.json())
    ```
    
    ### cURL
    ```bash
    curl -X POST https://api.example.com/api/query \\
      -H "Authorization: Bearer YOUR_TOKEN" \\
      -H "Content-Type: application/json" \\
      -d '{"query": "SELECT * FROM STORGRP"}'
    ```
    """,
    version=settings.app_version,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# ==================== MIDDLEWARE ====================

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_allowed_origins(),
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# Rate Limiter
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Request logging middleware
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = datetime.now()
    
    # –ü–æ–ª—É—á–∏—Ç—å IP –∫–ª–∏–µ–Ω—Ç–∞
    client_ip = request.client.host if request.client else "unknown"
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
    auth_header = request.headers.get("Authorization", "")
    token_preview = ""
    if auth_header.startswith("Bearer "):
        token = auth_header[7:]
        token_preview = f" | Token: {token[:10]}..." if token else ""
    
    logger.info(
        f"‚Üí {request.method} {request.url.path} | IP: {client_ip}{token_preview}"
    )
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    try:
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elapsed = (datetime.now() - start_time).total_seconds()
        
        logger.info(
            f"‚Üê {request.method} {request.url.path} | "
            f"Status: {response.status_code} | Time: {elapsed:.3f}s"
        )
        
        return response
        
    except Exception as e:
        elapsed = (datetime.now() - start_time).total_seconds()
        logger.error(
            f"‚úó {request.method} {request.url.path} | "
            f"Error: {str(e)} | Time: {elapsed:.3f}s"
        )
        raise


# ==================== ROUTERS ====================

# Health check (–±–µ–∑ rate limiting)
app.include_router(health.router)

# Query endpoint (—Å rate limiting)
app.include_router(query.router)

# Info endpoints (—Å rate limiting)
app.include_router(info.router)

# ==================== ERROR HANDLERS ====================

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫"""
    logger.error(f"Internal server error: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Internal server error",
            "timestamp": datetime.now().isoformat()
        }
    )


# ==================== MAIN ====================

if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=settings.port,
        reload=settings.app_env == "development",
        log_level=settings.log_level.lower()
    )

